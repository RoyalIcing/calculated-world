---
import Code from "../components/Code.astro";
// import { MemoryIO } from "../custom-elements/MemoryIO.js";

// const wasmURL = new URL("/podcast_feed_xml_OPT.wasm", Astro.url.origin);
// const { instance } = await WebAssembly.instantiateStreaming(fetch(wasmURL), {
//   datasource: {
//     get_episodes_count: () => 2,
//     get_episode_pub_date_utc: () => 0,
//     get_episode_duration_seconds: () => 0,
//     write_episode_id: (episodeID, writePtr) => {},
//     write_episode_title: (episodeID, writePtr) => {
//       return writeStringAt(`Episode ${episodeID + 1}`, writePtr);
//     },
//     write_episode_description: (episodeID, writePtr) => {
//       return writeStringAt(`My description for ${episodeID + 1}`, writePtr);
//     },
//     write_episode_link_url: (episodeID, writePtr) => {},
//     write_episode_mp3_url: (episodeID, writePtr) => {},
//     get_episode_mp3_byte_count: (episodeID, writePtr) => {},
//     write_episode_content_html: (episodeID, writePtr) => {},
//   },
// });

// function getMemory() {
//   return new MemoryIO(instance.exports);
// }
// function writeStringAt(string, writePtr) {
//   return getMemory().writeStringAt(string, writePtr);
// }

// const memoryIO = getMemory();
// (instance.exports.title as WebAssembly.Global).value = memoryIO.writeString(
//   "This podcast is rendered using WebAssembly on the server"
// )[0];
// (instance.exports.description as WebAssembly.Global).value =
//   memoryIO.writeString(
//     "The exact same WebAssembly runs on the server and in the browser."
//   )[0];

// const xml = memoryIO.readString(instance.exports.text_xml());
---

<!-- <details class="mb-8">
  <summary class="font-bold cursor-pointer">Rendered on the server:</summary>
  <Code lang="xml" code={xml} />
</details> --><!-- <details class="mb-8" open>
  <summary class="font-bold cursor-pointer">Rendered in browser:</summary> -->
<form id="podcast-feed-form" class="flex flex-col gap-2">
  <label>
    Number of episodes:
    <input type="number" name="episodes_count" min="0" value="3" />
  </label>
  <label>
    Title:
    <input name="title" value="My podcast" />
  </label>
  <label>
    Description:
    <input name="description" value="A history of the forklift" />
  </label>
  <output>
    <shiki-code data-lang="xml" data-code=""></shiki-code>
  </output>
</form>
<!-- </details> -->

<script>
  console.log("1");
  import { MemoryIO } from "../custom-elements/MemoryIO.js";
  console.log("2");
  const wasmURL = new URL("/podcast_feed_xml_OPT.wasm", window.location.origin);
  console.log(wasmURL);
  init();

  type Digit = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
  export type EpisodeFeedID = `episode-${Digit}${Digit}${Digit}`;

  export function episodeNumberToID(episodeNumber: number): EpisodeFeedID {
    const idPrefixed = episodeNumber
      .toString()
      .padStart(3, "0") as `${Digit}${Digit}${Digit}`;
    return `episode-${idPrefixed}`;
  }

  async function init() {
    class FormDatasource {
      form: HTMLFormElement;

      constructor(form: HTMLFormElement) {
        this.form = form;
      }

      get formData() {
        return new FormData(this.form);
      }

      get_episodes_count() {
        return parseInt(this.formData.get("episodes_count") as string) || 0;
      }

      get_episode_pub_date_utc() {
        return 0;
      }
      get_episode_duration_seconds() {
        return 0;
      }
      write_episode_id(episodeID, writePtr) {
        return writeStringAt(episodeNumberToID(episodeID + 1), writePtr);
      }
      write_episode_title(episodeID, writePtr) {
        return writeStringAt(`Episode ${episodeID + 1}`, writePtr);
      }
      write_episode_description(episodeID, writePtr) {
        return writeStringAt(`My description for ${episodeID + 1}`, writePtr);
      }
      write_episode_link_url(episodeID, writePtr) {}
      write_episode_mp3_url(episodeID, writePtr) {}
      get_episode_mp3_byte_count(episodeID, writePtr) {}
      write_episode_content_html(episodeID, writePtr) {}
    }

    const form = document.getElementById(
      "podcast-feed-form"
    ) as HTMLFormElement;
    const formDatasource = new FormDatasource(form);
    const datasource = Object.fromEntries(
      Object.getOwnPropertyNames(FormDatasource.prototype)
        .filter(
          (name) =>
            name !== "constructor" &&
            typeof FormDatasource.prototype[name] === "function"
        )
        .map((name) => [name, formDatasource[name].bind(formDatasource)])
    );

    const module = await WebAssembly.compileStreaming(fetch(wasmURL));

    console.time("new wasm instance");
    let instance = freshInstance();
    console.timeEnd("new wasm instance");
    console.time("new memory io");
    getMemory();
    console.timeEnd("new memory io");

    function freshInstance() {
      return new WebAssembly.Instance(module, { datasource });
    }

    function getMemory() {
      return new MemoryIO(instance.exports);
    }
    function writeStringAt(string: string, writePtr: number) {
      return getMemory().writeStringAt(string, writePtr);
    }

    const outputCodeEl = form.querySelector("output shiki-code") as HTMLElement;

    function update() {
      console.time("Instantiate new wasm instance");
      instance = freshInstance();
      console.timeEnd("Instantiate new wasm instance");

      if (typeof instance.exports.text_xml !== "function") return;
      if (false === instance.exports.title instanceof WebAssembly.Global)
        return;
      if (false === instance.exports.description instanceof WebAssembly.Global)
        return;

      const memoryIO = getMemory();
      const formData = new FormData(form);

      instance.exports.title.value = memoryIO.writeString(
        formData.get("title")
      )[0];

      instance.exports.description.value = memoryIO.writeString(
        formData.get("description")
      )[0];

      console.time("Generate XML");
      const ptr = instance.exports.text_xml();
      const xml = memoryIO.readString(ptr);
      console.timeEnd("Generate XML");
      setTimeout(() => {
        outputCodeEl.dataset.code = xml;
      }, 20);
    }

    requestAnimationFrame(update);
    form.addEventListener("input", update);
  }
</script>
