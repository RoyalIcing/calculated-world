---
// Object.assign(globalThis.process, {
//   cwd() {
//     return "/dev/null";
//   },
// });
// import { Code } from "astro/components";
import Code from "../components/Code.astro";
import PrimaryNavList from "../components/PrimaryNavList.astro";
import { wasmInstantiate } from "../wasm/wasmInstantiate";
import { joinBodyChunks } from "../wasm/wasmBodyChunks";
// import { fixShikiDeno } from "../fix-shiki-deno";

// await fixShikiDeno();

const collectedPublicURL = new URL(
  "https://storage.googleapis.com/collected-public/"
);
const baseWasmURL = new URL("sha256/application/wasm/", collectedPublicURL);
const counterHTMLWasm = await wasmInstantiate(
  new URL(
    "a8e931832cc7dce187d7234237f6cfef13e9fa523ab4101d3cec7bfb66e905c1.wasm",
    baseWasmURL
  ).href
);
const counterHTML = joinBodyChunks(
  counterHTMLWasm.instance.exports,
  counterHTMLWasm.memory
);

const initialSVGGlobals = { color_hex: 0x9f28edff };
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Calculated.World</title>
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />

    <script src="../custom-elements/wasm-html.js"></script>

    <style is:global>
      pre.shiki {
        white-space: pre-wrap;
      }
    </style>
  </head>
  <body>
    <main class="prose lg:prose-xl max-w-2xl mx-auto px-3 pt-16 pb-16">
      <h1 class="">
        <span class="text-sky-600">Calculated</span><span
          class="inline-block text-sky-400 animate-bounce"
          >&VeryThinSpace;<span class="inline-block relative"
            >.<span
              class="absolute top-0 left-0 font-black text-pink-400 animate-pulse"
              >.</span
            ></span
          >&VeryThinSpace;</span
        ><span class="text-pink-600">World</span>
      </h1>
      <p class="text-lg lg:text-2xl">
        The exact same WebAssembly downloaded lazily running at the <span
          class="text-sky-600">edge</span
        >
        <em>and</em> in the <span class="text-pink-600">browser</span>. A
        project by <a href="https://icing.space/">Patrick Smith</a>.
      </p>
      <hr />
      <p>
        For decades CDNs have reliably served static content <strong
          >close to users</strong
        >. And now the <strong>edge</strong> brings the ability to run code
        close to users too. But wouldn’t it be great if adding new code was as
        easy as uploading an image? Sounds like a security hole waiting to be
        exploited right?
      </p>
      <!--<p>But deploying to the cloud requires understanding writing code and knowing, well, how to deploy.</p>-->
      <p>
        <strong>WebAssembly</strong> allows code to be run <strong
          >safely in a sandbox</strong
        >. And the same WebAssembly can run on a server, in a browser, or even
        directly on-device like your <strong>phone</strong>.
      </p>
      <p>
        The dream of <strong>universal code</strong> doesn’t have to be only by
        using JavaScript. We can have a new cloud-first ecosystem of libraries,
        ones that run in <strong>every popular programming language</strong>,
        that are <strong>consistent</strong> across all environments and
        front/back-ends, and can be downloaded on-demand from a simple URL.
      </p>

      <hr />

      <h2>Server-rendered HTML</h2>
      <template data-get-tailwind-to-generate-these-classes>
        <output class="flex p-4 bg-gray-800">0</output>
        <button
          data-action="increment"
          class="mt-4 inline-block py-1 px-4 bg-white text-black rounded"
          >Increment</button
        >
      </template>
      <ul>
        <li>
          <a
            href="/collected-public/wasm-static-html/a8e931832cc7dce187d7234237f6cfef13e9fa523ab4101d3cec7bfb66e905c1"
            >Counter</a
          >
          <p>
            A {counterHTMLWasm.moduleByteLength} byte wasm module renders this
            initial HTML on the server. Unfortunately it’s not interactive — see
            the next section!
          </p>
          <div class="border-2 mt-4 pb-3 text-white">
            <Fragment set:html={counterHTML} />
          </div>
          <Code code={counterHTML} lang="html" />
        </li>
      </ul>
      <h2>Server-rendered HTML with client interaction (click on things)</h2>
      <ul>
        <li>
          <a
            href="/collected-public/wasm-dynamic-html/a8e931832cc7dce187d7234237f6cfef13e9fa523ab4101d3cec7bfb66e905c1"
            >Interactive Counter</a
          >
          <p>
            The same {counterHTMLWasm.moduleByteLength} byte wasm module renders
            initial HTML on the server, then the same wasm module is loaded by
            your browser where event listeners are attached, which call
            functions exported from wasm, changing its internal state and
            re-rendering the HTML. Click
            <strong>Increment</strong> to see!
          </p>
          <div class="border-2 mt-4 pb-3 text-white">
            <wasm-html
              src="/collected-public/wasm/a8e931832cc7dce187d7234237f6cfef13e9fa523ab4101d3cec7bfb66e905c1"
            >
              <Fragment set:html={counterHTML} />
            </wasm-html>
          </div>
          <p>
            Below is the initial HTML rendered by the server. The outer <code
              >{"<wasm-html>"}</code
            >
            <strong>custom element</strong> is run in the browser, loading the
            wasm URL at <code>src</code>. The inner HTML is the output of
            running the wasm module on the server, providing the initial HTML.
          </p>
          <Code
            code={`<wasm-html src="/collected-public/wasm/a8e931832cc7dce187d7234237f6cfef13e9fa523ab4101d3cec7bfb66e905c1">\n` +
              counterHTML.replaceAll(/^/gm, "  ") +
              "\n</wasm-html>"}
            lang="html"
          />
          <p>
            <strong>Event delegation</strong> is used to automatically wire up
            the button’s click to call the <code>exports.increment()</code>
             function exported from WebAssembly. How does it know which exported
            function to call? See the <code>data-action="increment"</code>? That
            declares the exported function’s name to find.
          </p>
          <p>
            So we have a single WebAssembly module, running in two places
            (server and browser), able to generate the initial HTML and the
            updated HTML after interactions. And the interactions are handled by
            what was declared in that initial HTML — <strong
              >it’s all self-contained</strong
            >.
          </p>
        </li>
      </ul>

      <hr />

      <h2>SVG</h2>
      <a
        href="/collected-public/wasm-svg/a6e388fd5d780de90144044066d2eeb889c1f930c85b1fff0a6b530fad391f20"
        class="block hover:bg-sky-100"
      >
        <figure class="text-center">
          <img
            src="/collected-public/wasm-svg/a6e388fd5d780de90144044066d2eeb889c1f930c85b1fff0a6b530fad391f20"
            alt="Black Square"
            class="block mx-auto"
          />
          <figcaption>Black square rendered at the edge</figcaption>
        </figure>
      </a>
      <details>
        <summary class="text-center text-base">View HTML</summary>
        <Code
          code={`
<img
  src="/collected-public/wasm-svg/a6e388fd5d780de90144044066d2eeb889c1f930c85b1fff0a6b530fad391f20"
  alt="Black Square"
/>`.trim()}
          lang="html"
          wrap
        />
      </details>
      <a
        href="/collected-public/wasm-svg/a6e388fd5d780de90144044066d2eeb889c1f930c85b1fff0a6b530fad391f20?global.color_hex=0x2299ee77"
        class="block hover:bg-sky-100"
      >
        <figure class="text-center">
          <img
            src="/collected-public/wasm-svg/a6e388fd5d780de90144044066d2eeb889c1f930c85b1fff0a6b530fad391f20?global.color_hex=0x2299ee77"
            alt="Blue Square"
            class="block mx-auto"
          />
          <figcaption>Transparent Blue Square rendered at the edge</figcaption>
        </figure>
      </a>
      <details>
        <summary class="text-center text-base">View HTML</summary>
        <Code
          code={`
<img
  src="/collected-public/wasm-svg/a6e388fd5d780de90144044066d2eeb889c1f930c85b1fff0a6b530fad391f20?global.color_hex=0x2299ee77"
  alt="Blue Square"
/>`.trim()}
          lang="html"
          wrap
        />
      </details>
      <form name="svg-rect" class="mt-16 text-center flex flex-col">
        <wasm-html
          src="/collected-public/wasm/a6e388fd5d780de90144044066d2eeb889c1f930c85b1fff0a6b530fad391f20"
          globals={JSON.stringify(initialSVGGlobals)}
          class="flex justify-center"></wasm-html>
        <legend class="mt-1 mb-1 font-medium text-center mx-auto"
          >Your color choice rendered in the browser</legend
        >
        <label for="global_color_hex">
          Edit RGBA hex color:
          <input
            name="color_hex"
            type="text"
            id="global_color_hex"
            value="0x9f28edff"
          />
        </label>
      </form>
      <script>
        const form = document.forms.namedItem("svg-rect")!;
        const wasmHTMLEl = form.querySelector("wasm-html") as HTMLElement;
        form.addEventListener("input", () => {
          const values = new FormData(form);
          const colorHex = parseInt(String(values.get("color_hex")));
          if (Number.isNaN(colorHex)) {
            return;
          }

          wasmHTMLEl.setAttribute(
            "globals",
            JSON.stringify({ color_hex: colorHex })
          );
        });
      </script>

      <hr />

      <h2>How does it work?</h2>
      <figure>
        <img src="/architecture.png" alt="" />
        <figcaption>
          Rendering HTML on the edge and in the browser. It starts from an
          object store (like S3 or GCP Storage) holding an example <code
            >abc.wasm</code
          > file, loaded by the edge server which renders the initial HTML sent
          to the user’s browser, which then loads an instance of the same <code
            >abc.wasm</code
          >, and adds event handlers which are forwarded to the wasm instance,
          re-rendering the HTML.
        </figcaption>
      </figure>

      <hr />

      <h2>What else can you create with WebAssembly?</h2>
      <ul>
        <li>State machines that run in any major programming language.</li>
        <li>
          HTML Components that run in the browser, on the server, and on the
          edge.
        </li>
        <li>Parsers and formatters that run <em>really</em> fast.</li>
        <li>
          Localized text that is code split and efficiently downloaded
          on-demand.
        </li>
        <li>Sandboxed user-generated code.</li>
        <li>
          Don’t just settle for inert JSON — how about Turing-complete payloads
          served from a HTTP API?
        </li>
        <li>Maybe even minature apps store as TXT records on your domain.</li>
      </ul>

      <hr />

      <p>
        This site you fine viewer are looking at is authored using <a
          href="https://astro.build">Astro</a
        > in server mode, uses <a href="https://deno.com/deploy">Deno Deploy</a>
         for edge hosting, <a href="https://cloud.google.com/storage"
          >Google Cloud Storage</a
        > to store .wasm files, and <a
          href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements"
          >custom HTML elements</a
        > written with a handful of JavaScript.
      </p>
      <p>
        But this approach is tied to none of these. It could easily work as well
        with S3 plus Next.js running on Node.js.
      </p>
    </main>

    <footer role="contentinfo" class="prose max-w-2xl mx-auto px-3 pt-16 pb-16">
      <nav>
        <PrimaryNavList />
      </nav>
      <hr />
      <p>© 2023 Royal Icing Pty Ltd</p>
      <p>
        <a href="https://github.com/cool-calm/calculated-world"
          >View source on GitHub</a
        >
      </p>
    </footer>
  </body>
</html>
